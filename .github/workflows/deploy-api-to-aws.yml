name: Deploy NestJS API to AWS with Terraform
run-name: ${{ github.actor }} is deploying to AWS with Terraform
on: [push]
env:
  AWS_REGION: us-east-1
  GH_TOKEN: ${{ secrets.FINE_GRAINED_TOKEN }}
jobs:
    Create-ECR:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - uses: hashicorp/setup-terraform@v1
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_wrapper: false
            - run: terraform init
            - run: terraform plan -input=false -target=aws_ecr_repository.my-tf-images
            - run: terraform apply -target=aws_ecr_repository.my-tf-images -auto-approve -input=false
            - run: terraform output -raw ecr_repo_url | gh variable set ECR_URL
            - run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_URL }}
            - run: docker build -t ${{ vars.ECR_URL }} .
            - run: docker push ${{ vars.ECR_URL }}
            - run: terraform apply -auto-approve -input=false
            - run: terraform output -raw instance_1_ID | gh secret set INSTANCE_1_ID
            - run: terraform output -raw instance_2_ID | gh secret set INSTANCE_2_ID
            - id: status-check
              run: aws ec2 describe-instances --filters "Name=instance-id,Values=[i-0c4f8589723a0144b,i-0835a1ec587bea0f5]" --query 'Reservations[*].Instances[0].State.Name'
            - if: steps.status-check.outputs[0] != 'running' && steps.status-check.outputs[1] != 'running'
              run: steps.status-check
            - if: steps.status-check.outputs[0] == 'running' && steps.status-check.outputs[1] == 'running'
              run: aws ssm send-command --document-name="AWS-RunShellScript" --targets '[{"Key":"InstanceIds","Values":["${{  secrets.INSTANCE_1_ID }}", "${{  secrets.INSTANCE_2_ID }}"]}]' --parameters '{"commands":["#!/bin/bash","sudo yum install docker -y","sudo service docker start","sudo docker pull ${{ vars.ECR_URL }}","sudo docker run -dp 80:3000 --name server ${{ vars.ECR_URL }}"]}'