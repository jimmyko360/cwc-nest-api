name: Deploy NestJS API to AWS with Terraform
run-name: ${{ github.actor }} is deploying to AWS with Terraform
on: [push]
env:
  AWS_REGION: us-east-1
  GH_TOKEN: ${{ secrets.FINE_GRAINED_TOKEN }}
jobs:
    Create-ECR:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - uses: hashicorp/setup-terraform@v1
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_wrapper: false
            - run: terraform init
            - run: terraform plan -input=false -target=aws_ecr_repository.my-tf-images
            - run: terraform apply -target=aws_ecr_repository.my-tf-images -auto-approve -input=false
            - run: terraform output -raw ecr_repo_url | gh variable set ECR_URL
            - run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_URL }}
            - run: docker build -t ${{ vars.ECR_URL }} .
            - run: docker push ${{ vars.ECR_URL }}
            - run: terraform apply -auto-approve -input=false
            - run: terraform output -raw instance_1_ID | gh secret set INSTANCE_1_ID
            - run: terraform output -raw instance_2_ID | gh secret set INSTANCE_2_ID
            - run: unbuffer aws ssm start-session --target=${{ secrets.INSTANCE_1_ID }}
            - run: pwd