name: Deploy NestJS API to AWS with Terraform
run-name: ${{ github.actor }} is deploying to AWS with Terraform
on: [push]
env:
  AWS_REGION: us-east-1
  GH_TOKEN: ${{ secrets.FINE_GRAINED_TOKEN }}
jobs:
    Create-ECR:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - uses: hashicorp/setup-terraform@v3
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_wrapper: false
            - run: terraform init
            - run: terraform plan -input=false -target=aws_ecr_repository.my-tf-images
            - run: terraform apply -target=aws_ecr_repository.my-tf-images -auto-approve -input=false
            - run: terraform output -raw ecr_repo_name | gh variable set ECR_NAME
            - name: Log into Amazon ECR
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@v2
            # - run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_URL }}
            # - run: docker build -t ${{ vars.ECR_URL }} .
            # - run: docker push ${{ vars.ECR_URL }}
            - name: Docker build and push image
              env:
                REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                REPOSITORY: ${{ vars.ECR_NAME }}
                IMAGE_TAG: latest
              run: |
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    Deploy-with-Terraform:
        runs-on: ubuntu-latest
        needs: Create-ECR
        steps:
            - uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - uses: hashicorp/setup-terraform@v3
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                  terraform_wrapper: false
            - run: terraform init
            - run: terraform plan -input=false
            - run: terraform apply -auto-approve -input=false
            - name: Get EC2 ID'S
              id: get_ids
              run: |
                INSTANCE_ID1=$(terraform output -raw instance_1_ID)
                INSTANCE_ID2=$(terraform output -raw instance_2_ID)
                echo "::set-output name=instance_id1::$INSTANCE_ID1"
                echo "::set-output name=instance_id2::$INSTANCE_ID2"
            - name: Wait for EC2 instances to be running
              id: wait_for_ec2
              run: |
                INSTANCE_ID1=${{ steps.get_ids.outputs.instance_id1 }}
                INSTANCE_ID2=${{ steps.get_ids.outputs.instance_id2 }}
                echo "Waiting for EC2 instances $INSTANCE_ID1 and $INSTANCE_ID2 to be in 'running' state..."
                
                while true; do
                    STATE1=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID1 --query 'Reservations[0].Instances[0].State.Name' --output text)
                    STATE2=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID2 --query 'Reservations[0].Instances[0].State.Name' --output text)
                    echo "Instance $INSTANCE_ID1 state: $STATE1. Instance $INSTANCE_ID2 state: $STATE2."
                    
                    if [ "$STATE1" = "running" ] && [ "$STATE2" = "running" ]; then
                      echo "Both instances are running."
                      echo "::set-output name=instance_id1::$INSTANCE_ID1"
                      echo "::set-output name=instance_id2::$INSTANCE_ID2"
                      break
                    fi
                    sleep 10
                done
            - name: Log into Amazon ECR
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@v2
            - name: Docker pull and run image
              id: run-docker-container
              run: |
                INSTANCE_ID1=${{ steps.wait_for_ec2.outputs.instance_id1 }}
                INSTANCE_ID2=${{ steps.wait_for_ec2.outputs.instance_id2 }}
                COMMAND_ID=$(aws ssm send-command \
                  --document-name="AWS-RunShellScript" \
                  --instance-ids $INSTANCE_ID1 $INSTANCE_ID2 \
                  --parameters '{"commands":["#!/bin/bash",
                    "sudo yum install docker -y",
                    "sudo service docker start",
                    "aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.ecr-login.outputs.registry }}",
                    "sudo docker stop server || true",
                    "sudo docker pull ${{ steps.ecr-login.outputs.registry }}/${{ vars.ECR_NAME }}:latest",
                    "sudo docker run --rm -dp 80:3000 --name server ${{ steps.ecr-login.outputs.registry }}/${{ vars.ECR_NAME }}:latest"]}' \
                  --query "Command.CommandId" \
                  --output text)
                echo "::set-output name=command_id::$COMMAND_ID"
                echo "::set-output name=instance_id1::$INSTANCE_ID1"
                echo "::set-output name=instance_id2::$INSTANCE_ID2"
            - name: Check Status of Docker Pull and Docker Run
              run: |
                COMMAND_ID=${{ steps.run-docker-container.outputs.command_id }}
                INSTANCE_ID1=${{ steps.wait_for_ec2.outputs.instance_id1 }}
                INSTANCE_ID2=${{ steps.wait_for_ec2.outputs.instance_id2 }}
                aws ssm wait command-executed \
                  --command-id $COMMAND_ID \
                  --instance-id $INSTANCE_ID1 || true

                aws ssm wait command-executed \
                  --command-id $COMMAND_ID \
                  --instance-id $INSTANCE_ID2 || true

                status1=$(aws ssm list-commands \
                  --command-id $COMMAND_ID \
                  --query "Commands[0].Status" \
                  --output text)

                status2=$(aws ssm list-commands \
                  --command-id $COMMAND_ID \
                  --query "Commands[1].Status" \
                  --output text)

                echo "status1: $status1"
                echo "status2: $status2"

                if [ $status1 == "Success" ] && [ $status2 == "Success" ]; then
                  echo "Servers deployed succesfully."
                else
                  echo "Server deployment failed"  
                  exit 1
                fi